from itertools import permutations


class IntProcessor():
    def __init__(self, command, initial_input):
        self.command = command.copy()
        self.memory = initial_input
        self.memory_ptr = 0
        self.instr_ptr = 0

    def execute(self):
        while True:
            instruction = "{0:0=5d}".format(self.command[self.instr_ptr])
            p1 = instruction[2]
            p2 = instruction[1]
            p3 = instruction[0]
            opcode = instruction[3:]

            if opcode == "01":
                if p1 == "0":
                    a = self.command[self.command[self.instr_ptr+1]]
                else:
                    a = self.command[self.instr_ptr+1]
                if p2 == "0":
                    b = self.command[self.command[self.instr_ptr+2]]
                else:
                    b = self.command[self.instr_ptr+2]
                self.command[self.command[self.instr_ptr+3]] = a + b
                self.instr_ptr += 4

            elif opcode == "02":
                if p1 == "0":
                    a = self.command[self.command[self.instr_ptr+1]]
                else:
                    a = self.command[self.instr_ptr+1]
                if p2 == "0":
                    b = self.command[self.command[self.instr_ptr+2]]
                else:
                    b = self.command[self.instr_ptr+2]
                self.command[self.command[self.instr_ptr+3]] = a * b
                self.instr_ptr += 4

            elif opcode == "03":
                if self.memory_ptr < len(self.memory):
                    self.command[self.command[self.instr_ptr+1]] = self.memory[self.memory_ptr]
                    self.memory_ptr += 1
                else:
                    # this only happens if we attempt to read the next input before it has been
                    # generated by the upstream processor
                    # we should return a sentinel value so that we know to move on from this
                    # processor for now
                    return -2 
                self.instr_ptr += 2

            elif opcode == "04":
                if p1 == "0":
                    output = self.command[self.command[self.instr_ptr+1]]
                else:
                    output = self.command[self.instr_ptr+1]
                self.instr_ptr += 2
                return output

            elif opcode == "05":
                if p1 == "0":
                    test_val = self.command[self.command[self.instr_ptr+1]]
                else:
                    test_val = self.command[self.instr_ptr+1]
                if p2 == "0":
                    jump_val = self.command[self.command[self.instr_ptr+2]]
                else:
                    jump_val = self.command[self.instr_ptr+2]
                if test_val != 0:
                    self.instr_ptr = jump_val
                else:
                    self.instr_ptr += 3

            elif opcode == "06":
                if p1 == "0":
                    test_val = self.command[self.command[self.instr_ptr+1]]
                else:
                    test_val = self.command[self.instr_ptr+1]
                if p2 == "0":
                    jump_val = self.command[self.command[self.instr_ptr+2]]
                else:
                    jump_val = self.command[self.instr_ptr+2]
                if test_val == 0:
                    self.instr_ptr = jump_val
                else:
                    self.instr_ptr += 3

            elif opcode == "07":
                if p1 == "0":
                    first_val = self.command[self.command[self.instr_ptr+1]]
                else:
                    first_val = self.command[self.instr_ptr+1]
                if p2 == "0":
                    second_val = self.command[self.command[self.instr_ptr+2]]
                else:
                    second_val = self.command[self.instr_ptr+2]
                if first_val < second_val:
                    self.command[self.command[self.instr_ptr+3]] = 1
                else:
                    self.command[self.command[self.instr_ptr+3]] = 0
                self.instr_ptr += 4

            elif opcode == "08":
                if p1 == "0":
                    first_val = self.command[self.command[self.instr_ptr+1]]
                else:
                    first_val = self.command[self.instr_ptr+1]
                if p2 == "0":
                    second_val = self.command[self.command[self.instr_ptr+2]]
                else:
                    second_val = self.command[self.instr_ptr+2]
                if first_val == second_val:
                    self.command[self.command[self.instr_ptr+3]] = 1
                else:
                    self.command[self.command[self.instr_ptr+3]] = 0
                self.instr_ptr += 4

            elif opcode == "99":
               return -1


def run_next_processor(p):
    current_output = p.execute()
    if current_output == -2 or current_output == -1:
        return None
    else:
        return current_output


def main():
    part_one = False
    COMMAND = [3,8,1001,8,10,8,105,1,0,0,21,46,63,76,97,118,199,280,361,442,99999,3,9,102,4,9,9,101,2,9,9,1002,9,5,9,101,4,9,9,102,2,9,9,4,9,99,3,9,101,5,9,9,102,3,9,9,101,3,9,9,4,9,99,3,9,1001,9,2,9,102,3,9,9,4,9,99,3,9,1002,9,5,9,101,4,9,9,1002,9,3,9,101,2,9,9,4,9,99,3,9,1002,9,5,9,101,3,9,9,1002,9,5,9,1001,9,5,9,4,9,99,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,99,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,2,9,9,4,9,99,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,99]
    if part_one:
        PHASE_SETTINGS = [0, 1, 2, 3, 4]
    else:
        PHASE_SETTINGS = [5, 6, 7, 8, 9]
    max_output = 0
    for p in permutations(PHASE_SETTINGS, 5):
        result = 0
        p1 = IntProcessor(COMMAND, [p[0], 0])
        p2 = IntProcessor(COMMAND, [p[1]])
        p3 = IntProcessor(COMMAND, [p[2]])
        p4 = IntProcessor(COMMAND, [p[3]])
        p5 = IntProcessor(COMMAND, [p[4]])

        while True:
            p1_output = run_next_processor(p1)
            p2.memory.append(p1_output)

            p2_output = run_next_processor(p2)
            p3.memory.append(p2_output)

            p3_output = run_next_processor(p3)
            p4.memory.append(p3_output)

            p4_output = run_next_processor(p4)
            p5.memory.append(p4_output)

            p5_output = run_next_processor(p5)

            if p5_output:
                if not part_one:
                    p1.memory.append(p5_output)
                result = p5_output
            else:
                if p5.execute() == -1:
                    break

        if result > max_output:
            max_output = result
    print(max_output)


if __name__  == "__main__":
    main()
